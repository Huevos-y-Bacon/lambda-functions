---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  v1.0 Lambda function to delete EBS snapshots based on time and snapshot description
Resources: 
# IAM PERMISSIONS FOR EBS SNAPSHOT FUNCTIONS
  LambdaEBSSnapshotsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaEBSSnapshots
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateSnapshot'
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteSnapshot'
                  - 'ec2:Describe*'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
# TIME BASED EBS SNAPSHOT CLEANUP WITH FILTER (E.G. FOR SGW VOUME SNAPSHOTS)
  LambdaTimeBasedEBSSnapshotsCleanup:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub 
          - |-
            # AWS Lambda Function to delete EBS snapshots older than a specified number of days. 
            #  FILTERS BASED ON SNAPSHOT DESCRIPTION. This is the only value that can be used to 
            #  identify snapshots created via scheduled Storage Gateway volume snapshots

            import boto3 
            import collections 
            import datetime

            dryrun = "${DryRun}"
            retention = ${SnapshotAge}

            snapshot_descriptions = [
              'SGW*napshot',
              'Daily*',
              '*snapshot schedule',
              '*_temp',
              ] # multiple wildcards work, e.g. '*CreateIm*ami*7e2'

            # GET THE CURRENT REGION
            session = boto3.session.Session()
            region = session.region_name

            # DEFINE CONNECTION
            ec2 = boto3.client('ec2',region)
            owner_id = boto3.client('sts').get_caller_identity().get('Account')

            # DEFINE FILTERS
            filters = [
              {'Name': 'owner-id', 'Values': [owner_id]},
              {'Name': 'description', 'Values': snapshot_descriptions}
              ]

            def lambda_handler(event, context): 
              mysnapshots = ec2.describe_snapshots(Filters=filters)
              now = datetime.datetime.today().strftime('%Y%m%d')
              current = int(now)
              snapcounter = 0
              for snapshot in mysnapshots['Snapshots']:
                # REMOVE TIME INFO FROM SNAPSHOT IN ORDER FOR COMPARISON TO WORK BELOW
                x = snapshot['StartTime'].strftime('%Y%m%d')
                snaptime = int(x)
                z = current - snaptime
                if z > retention:
                  snapcounter = snapcounter + 1
                  if dryrun != "yes":
                    print "Snapshot %s (%s) is older than %s days (date: %s). Deleting." % (snapshot['SnapshotId'],snapshot['Description'],retention,snapshot['StartTime'])
                    ec2.delete_snapshot(SnapshotId= snapshot['SnapshotId'])
                  else:
                    print "[DRYRUN] Snapshot %s (%s) is older than %s days (date: %s). Deleting." % (snapshot['SnapshotId'],snapshot['Description'],retention,snapshot['StartTime'])
              if snapcounter == 0:
                print "No snapshots to delete"
              else:
                print "Number of snapshots deleted: " + str(snapcounter)
          - SnapshotAge: '14'
            DryRun: 'yes'
      Description: A lambda function that cleans up old EBS snapshots.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEBSSnapshotsRole.Arn
      Runtime: python2.7
      Timeout: '300' # this can be a fairly long-running function
  LambdaTimeBasedEBSSnapshotsCleanupTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${LambdaTimeBasedEBSSnapshotsCleanup}
      Description: !Sub Trigger for function ${LambdaTimeBasedEBSSnapshotsCleanup}
      ScheduleExpression: cron(0 20 ? * * *) # 8PM UTC Daily
      State: ENABLED
      Targets:
      - Arn: !GetAtt LambdaTimeBasedEBSSnapshotsCleanup.Arn
        Id: LambdaTimeBasedEBSSnapshotsCleanupTrigger
  LambdaTimeBasedEBSSnapshotsCleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LambdaTimeBasedEBSSnapshotsCleanup}
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaTimeBasedEBSSnapshotsCleanupTrigger.Arn
